Package
- rosrt for rt1 firmware, wifi localization code
- ros-wifi-localization for SSID scanning
- urg_node for Hokuyo Lidar
- hector_mapping for mapping and location estimation

1. Run RT1 on Raspberry Pi 3
1.1. Raspberry Pi 3
- Turn on Raspberry Pi 3 with mobile battery.
- Access Raspberry Pi 3 via ssh login.
1.2. RT1
- Setup ROS master uri, start roscore (run roscore on Laboratory's internet)
- Put the battery in the RT1 battery box, turn on the switch
- Press the power button to start RT1. The hardware will be running on its original firmware arowana
1.3. Connect each other
- Plug in the USB cable to Raspberry Pi 3 
- (Optional) run script file ./create_udev_rules.sh to assign permanent port to RT1 (/dev/rt1)
- Give permission to RT1 port: sudo chmod a+rw /dev/rt1 or sudo chmod a+rw /dev/ttyUSB* (by default ttyUSB0)
- Run ROS firmware for RT1: rosrun ros_start rosrt_rt1 (by RT.Works)
- Run ROS Control node: rosrun ros_start rt1_node
- You can also launch instead: roslaunch ros_start rt1.launch

2. Run Lidar on RT1
2.1. Fix your Lidar on RT1
- Aluminium plate on RT1 is compatible with 2 kinds of Lidar: RPLidar A2 and Hokuyo UBG-04LX-F01
- (Optional) There is an angled plate attachment to use RPLidar for scanning obstacles on the floor
- For Hokuyo UBG-04LX-F01, use vertical wall attachment to fix the Lidar with the plate.
2.2. Run Lidar
2.2.A. (Currently unused) Angled laser scanner for obstacle avoidance
- Attach RPLidar to the angled plate and put it on the aluminium plate.
- Connect RPLidar USB to the Raspberry Pi 3, assign the USB port via script: ./create_udev_rules.sh
- From 'modified' version of RPLidar package, launch: roslaunch rplidar_ros angled_rplidar.launch
- You can also launch the whole system with roslaunch ros_Start rt1_laser.launch
2.2.B Using laser scanner for mapping
- Give permission to Hokuyo port: sudo chmod 666 /dev/ttyACM0
- run the Hokuyo Lidar: rosrun urg_node urg_node 
- Change ros_master on your computer's ./bashrc to your Raspberry Pi
- run Hector mapping node 'on your computer (to reduce workload on RasPi)': roslaunch hector_mapping mapping_hector_rt1.launch (or mapping_default.launch by default)
- run RViz 'on your computer'. 
- Change fixed frame to laser. Add LaserScan and Map by topic to visualize.
- When finished mapping, rosrun map_server map_saver -f your_map_name

3. Wifi Localization / Fingerprinting
- service wpa_supplicant stop to enable channel hopping without disturbing program
- rosrun rss acquire to get rss data from each access point
- rosrun ros_start wifi_node to get rss_avg data or average signal strength in 1 batch from each access point
- rosrun ros_start loc_node to start getting average signal strength over time, thus, the beacon using to receive signal (computer)
should be static to keep signal strength accurate
- rosrun ros_start find_loc [filename] [mode] [criteria] to check the incoming signal with the database and output the predicted location.
